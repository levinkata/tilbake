// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tilbake.Infrastructure.Data.Context;

namespace Tilbake.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TilbakeDbContext))]
    [Migration("20200610133209_DocumentCategory")]
    partial class DocumentCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.4.20220.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tilbake.Domain.Models.Adresse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.AllRisk", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiskItemID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("RiskItemID");

                    b.ToTable("AllRisk");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Bank", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.BankAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("BankBranchID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.BankBranch", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("BankID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.ToTable("BankBranch");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.BodyType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("BodyType");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.City", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LandID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("LandID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Content", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<Guid>("RoofTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WallTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("RoofTypeID");

                    b.HasIndex("WallTypeID");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.CoverType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("CoverType");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.DocumentCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("DocumentCategory");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.DriverType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("DriverType");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Extension", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Extension");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Glass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiskItemID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("RiskItemID");

                    b.ToTable("Glass");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.House", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<Guid>("ResidenceTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoofTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WallTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ResidenceTypeID");

                    b.HasIndex("RoofTypeID");

                    b.HasIndex("WallTypeID");

                    b.ToTable("House");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Incident", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Insurer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Insurer");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Invoice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<Guid>("InvoiceStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("InvoiceStatusID");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.InvoiceItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PolitikkRiskID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("PolitikkRiskID");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.InvoiceNumberGenerator", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.HasKey("InvoiceNumber")
                        .HasName("PK_InvoiceNumber");

                    b.ToTable("InvoiceNumberGenerator");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.InvoiceStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("InvoiceStatus");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Klient", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("KlientNumber")
                        .HasColumnType("int");

                    b.Property<string>("KlientType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LandID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("OccupationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("TitleID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("LandID");

                    b.HasIndex("OccupationID");

                    b.HasIndex("TitleID");

                    b.ToTable("Klient");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.KlientBankAccount", b =>
                {
                    b.Property<Guid>("BankAccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KlientID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BankAccountID", "KlientID")
                        .HasName("PK_KlientBankAccount");

                    b.HasIndex("KlientID");

                    b.ToTable("KlientBankAccount");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.KlientDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KlientID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("DocumentCategoryID");

                    b.HasIndex("KlientID");

                    b.ToTable("KlientDocument");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.KlientNumberGenerator", b =>
                {
                    b.Property<int>("KlientNumber")
                        .HasColumnType("int");

                    b.HasKey("KlientNumber")
                        .HasName("PK_KlientNumber");

                    b.ToTable("KlientNumberGenerator");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.KlientRisk", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KlientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiskID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("KlientID");

                    b.HasIndex("RiskID");

                    b.ToTable("KlientRisk");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Krav", b =>
                {
                    b.Property<int>("KravNumber")
                        .HasColumnType("int");

                    b.Property<string>("Claimant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Excess")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentDetail")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("IncidentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KravStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PolitikkRiskID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RecoverFromThirdParty")
                        .HasColumnType("bit");

                    b.Property<Guid>("RegionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReserveInsured")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReserveInsuredRevised")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReserveThirdParty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReserveThirdPartyRevised")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("KravNumber")
                        .HasName("PK_Krav");

                    b.HasIndex("IncidentID");

                    b.HasIndex("KravStatusID");

                    b.HasIndex("PolitikkRiskID");

                    b.HasIndex("RegionID");

                    b.ToTable("Krav");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.KravNumberGenerator", b =>
                {
                    b.Property<int>("KravNumber")
                        .HasColumnType("int");

                    b.HasKey("KravNumber")
                        .HasName("PK_KravNumber");

                    b.ToTable("KravNumberGenerator");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.KravStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("KravStatus");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Land", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Land");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Motor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BodyTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("DriverTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EngineCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("MotorModelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MotorUseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RegYear")
                        .HasColumnType("int");

                    b.Property<bool>("SecurityFitting")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("BodyTypeID");

                    b.HasIndex("DriverTypeID");

                    b.HasIndex("MotorModelID");

                    b.HasIndex("MotorUseID");

                    b.ToTable("Motor");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.MotorImprovement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("FactoryFitted")
                        .HasColumnType("bit")
                        .HasMaxLength(50);

                    b.Property<string>("MakeModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("MotorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("MotorID");

                    b.ToTable("MotorImprovement");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.MotorMake", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("MotorMake");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.MotorModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MotorMakeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("MotorMakeID");

                    b.ToTable("MotorModel");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.MotorUse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("MotorUse");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Occupation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Occupation");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Politikk", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CoverEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CoverStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InceptionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InsurerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PolitikkNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("PolitikkStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PolitikkTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PortfolioKlientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalesTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("InsurerID");

                    b.HasIndex("PolitikkStatusID");

                    b.HasIndex("PolitikkTypeID");

                    b.HasIndex("PortfolioKlientID");

                    b.HasIndex("SalesTypeID");

                    b.ToTable("Politikk");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PolitikkNumberGenerator", b =>
                {
                    b.Property<int>("PolitikkNumber")
                        .HasColumnType("int");

                    b.HasKey("PolitikkNumber")
                        .HasName("PK_PolitikkNumber");

                    b.ToTable("PolitikkNumberGenerator");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PolitikkRisk", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Excess")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("KlientRiskID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PolitikkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SumInsured")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CoverTypeID");

                    b.HasIndex("KlientRiskID");

                    b.HasIndex("PolitikkID");

                    b.ToTable("PolitikkRisk");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PolitikkRiskExtension", b =>
                {
                    b.Property<Guid>("PolitikkRiskID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExtensionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PolitikkRiskID", "ExtensionID")
                        .HasName("PK_PolitikkRiskExtension");

                    b.HasIndex("ExtensionID");

                    b.ToTable("PolitikkRiskExtension");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PolitikkStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PolitikkStatus");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PolitikkType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PolitikkType");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Portfolio", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Portfolio");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PortfolioKlient", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KlientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PortfolioID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("KlientID");

                    b.HasIndex("PortfolioID");

                    b.ToTable("PortfolioKlient");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Premium", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolitikkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PremiumDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PremiumMonth")
                        .HasColumnType("int");

                    b.Property<Guid>("PremiumTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PremiumYear")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PolitikkID");

                    b.HasIndex("PremiumTypeID");

                    b.ToTable("Premium");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PremiumType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PremiumType");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Quote", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalInfo")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("KlientInfo")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("QuoteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuoteNumber")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<Guid>("QuoteStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("QuoteStatusID");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.QuoteItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Excess")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("InsurerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KlientRiskID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("QuoteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SumInsured")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CoverTypeID");

                    b.HasIndex("InsurerID");

                    b.HasIndex("KlientRiskID");

                    b.HasIndex("QuoteID");

                    b.ToTable("QuoteItem");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.QuoteNumberGenerator", b =>
                {
                    b.Property<int>("QuoteNumber")
                        .HasColumnType("int");

                    b.HasKey("QuoteNumber")
                        .HasName("PK_QuoteNumber");

                    b.ToTable("QuoteNumberGenerator");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.QuoteStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("QuoteStatus");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Region", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.ResidenceType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("ResidenceType");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Risk", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AllRiskID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GlassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MotorID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("AllRiskID");

                    b.HasIndex("ContentID");

                    b.HasIndex("GlassID");

                    b.HasIndex("HouseID");

                    b.HasIndex("MotorID");

                    b.ToTable("Risk");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.RiskItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("RiskItem");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.RoofType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("RoofType");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.SalesType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("SalesType");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Title", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.WallType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("WallType");
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Adresse", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.AllRisk", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.RiskItem", "RiskItem")
                        .WithMany()
                        .HasForeignKey("RiskItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.BankAccount", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.BankBranch", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.City", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Land", "Land")
                        .WithMany()
                        .HasForeignKey("LandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Content", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.RoofType", "RoofType")
                        .WithMany()
                        .HasForeignKey("RoofTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.WallType", "WallType")
                        .WithMany()
                        .HasForeignKey("WallTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Glass", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.RiskItem", "RiskItem")
                        .WithMany()
                        .HasForeignKey("RiskItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.House", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.ResidenceType", "ResidenceType")
                        .WithMany()
                        .HasForeignKey("ResidenceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.RoofType", "RoofType")
                        .WithMany()
                        .HasForeignKey("RoofTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.WallType", "WallType")
                        .WithMany()
                        .HasForeignKey("WallTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Invoice", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.InvoiceStatus", "Invoicetatus")
                        .WithMany()
                        .HasForeignKey("InvoiceStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.InvoiceItem", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.PolitikkRisk", "PolitikkRisk")
                        .WithMany()
                        .HasForeignKey("PolitikkRiskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Klient", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Land", "Land")
                        .WithMany()
                        .HasForeignKey("LandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.KlientBankAccount", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.BankAccount", "BankAccount")
                        .WithMany("KlientBankAccounts")
                        .HasForeignKey("BankAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Klient", "Klient")
                        .WithMany()
                        .HasForeignKey("KlientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.KlientDocument", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.DocumentCategory", "DocumentCategory")
                        .WithMany()
                        .HasForeignKey("DocumentCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Klient", "Klient")
                        .WithMany()
                        .HasForeignKey("KlientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.KlientRisk", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Klient", "Klient")
                        .WithMany()
                        .HasForeignKey("KlientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Risk", "Risk")
                        .WithMany("KlientRisks")
                        .HasForeignKey("RiskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Krav", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.KravStatus", "KravStatus")
                        .WithMany()
                        .HasForeignKey("KravStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.PolitikkRisk", "PolitikkRisk")
                        .WithMany()
                        .HasForeignKey("PolitikkRiskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Motor", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.BodyType", "BodyType")
                        .WithMany()
                        .HasForeignKey("BodyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.DriverType", "DriverType")
                        .WithMany()
                        .HasForeignKey("DriverTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.MotorModel", "MotorModel")
                        .WithMany()
                        .HasForeignKey("MotorModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.MotorUse", "MotorUse")
                        .WithMany()
                        .HasForeignKey("MotorUseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.MotorImprovement", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Motor", "Motor")
                        .WithMany("MotorImprovements")
                        .HasForeignKey("MotorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.MotorModel", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.MotorMake", "MotorMake")
                        .WithMany("MotorModels")
                        .HasForeignKey("MotorMakeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Politikk", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Insurer", "Insurer")
                        .WithMany()
                        .HasForeignKey("InsurerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.PolitikkStatus", "PolitikkStatus")
                        .WithMany()
                        .HasForeignKey("PolitikkStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.PolitikkType", "PolitikkType")
                        .WithMany()
                        .HasForeignKey("PolitikkTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.PortfolioKlient", "PortfolioKlient")
                        .WithMany()
                        .HasForeignKey("PortfolioKlientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.SalesType", "SalesType")
                        .WithMany()
                        .HasForeignKey("SalesTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PolitikkRisk", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.CoverType", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.KlientRisk", "KlientRisk")
                        .WithMany("PolitikkRisks")
                        .HasForeignKey("KlientRiskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Politikk", "Politikk")
                        .WithMany("PolitikkRisks")
                        .HasForeignKey("PolitikkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PolitikkRiskExtension", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Extension", "Extension")
                        .WithMany()
                        .HasForeignKey("ExtensionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.PolitikkRisk", "PolitikkRisk")
                        .WithMany()
                        .HasForeignKey("PolitikkRiskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.PortfolioKlient", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Klient", "Klient")
                        .WithMany("PortfolioKlients")
                        .HasForeignKey("KlientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Portfolio", "Portfolio")
                        .WithMany("PortfolioKlients")
                        .HasForeignKey("PortfolioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Premium", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.Politikk", "Politikk")
                        .WithMany()
                        .HasForeignKey("PolitikkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.PremiumType", "PremiumType")
                        .WithMany()
                        .HasForeignKey("PremiumTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Quote", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.QuoteStatus", "QuoteStatus")
                        .WithMany()
                        .HasForeignKey("QuoteStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.QuoteItem", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.CoverType", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Insurer", "Insurer")
                        .WithMany()
                        .HasForeignKey("InsurerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.KlientRisk", "KlientRisk")
                        .WithMany("QuoteItems")
                        .HasForeignKey("KlientRiskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tilbake.Domain.Models.Quote", "Quote")
                        .WithMany("QuoteItems")
                        .HasForeignKey("QuoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tilbake.Domain.Models.Risk", b =>
                {
                    b.HasOne("Tilbake.Domain.Models.AllRisk", "AllRisk")
                        .WithMany("Risks")
                        .HasForeignKey("AllRiskID");

                    b.HasOne("Tilbake.Domain.Models.Content", "Content")
                        .WithMany("Risks")
                        .HasForeignKey("ContentID");

                    b.HasOne("Tilbake.Domain.Models.Glass", "Glass")
                        .WithMany("Risks")
                        .HasForeignKey("GlassID");

                    b.HasOne("Tilbake.Domain.Models.House", "House")
                        .WithMany("Risks")
                        .HasForeignKey("HouseID");

                    b.HasOne("Tilbake.Domain.Models.Motor", "Motor")
                        .WithMany("Risks")
                        .HasForeignKey("MotorID");
                });
#pragma warning restore 612, 618
        }
    }
}
