$ dotnet ef dbcontext scaffold 'Server=den1.mssql7.gear.host;Database=tilbake;User Id=tilbake;Password=Nt7H1wK3X5!~;' Microsoft.EntityFrameworkCore.SqlServer --context TilbakeDbContext --context-dir ~/source/repos/tilbake/Tilbake.Infrastructure.Persistence/Context --context-namespace Tilbake.Infrastructure.Persistence.Context --force --project Tilbake.Domain --output-dir Models --startup-project Tilbake.MVC

EF GroupBy
var cinemaCustomers = _context.Customers.
                            Where(x => x.Groups.Any(x => x.Name.Contains("cinema")));


Bootstrap Serverside Validation
https://getbootstrap.com/docs/5.0/forms/validation/
                            

You can simplify this, and there's really no need for using jquery here.

var id = 88;

for(var i = 0; i < data.length; i++) {
    if(data[i].id == id) {
        data.splice(i, 1);
        break;
    }
}

here is a solution if you are not using jquery:

myArray = myArray.filter(function( obj ) {
  return obj.id !== id;
});



Generic repository pattern and Unit of work with Entity framework
http://janholinka.net/Blog/Article/9

   var siteDetails = 
           await this._siteDetailsRepository
                     .GetAsync(x => 
                               x.siteNo == siteNo,  //Conditions         
                               null,                //Orders          
                               x => x.Country)      //Includes
           .ConfigureAwait(false);

Generic Entity Base Class
https://cpratt.co/generic-entity-base-class/

A Truly Generic Repository, Part 1
https://cpratt.co/truly-generic-repository/

$ dotnet ef dbcontext scaffold 'Server=den1.mssql7.gear.host;Database=tilbake;User Id=tilbake;Password=Nt7H1wK3X5!~;' Microsoft.EntityFrameworkCore.SqlServer --context TilbakeDbContext --context-dir ~/source/repos/tilbake/Tilbake.Infrastructure.Persistence/Context --context-namespace Tilbake.Infrastructure.Persistence.Context --force --project Tilbake.Domain --output-dir Models --startup-project Tilbake.MVC

modelBuilder.ApplyConfigurationsFromAssembly(typeof(TilbakeDbContext).Assembly);

    <script>
        var selectedClientId = '@Model.Id';

        $(document).ready(function () {
            LoadAddress();
        });

        $("#AddressCountryId").change(function () {
            var selectedCountryId = $("#AddressCountryId option:selected").val();

            $.ajax({
                url: '@(Url.Action("GetCities", "Cities"))',
                traditional: true,
                dataType: "JSON",
                type: 'GET',
                data: { countryId: selectedCountryId },
                error: function () {
                    alert("An error occurred.");
                },
                success: function (cities) {

                    $("#CityId").empty();   // clear before appending new list
                    $.each(cities, function (index, city) {
                        $('#CityId').append($('<option></option>').val(city.id).html(city.name));
                    });
                }
            });
        });

        $('#addressModal').on('show.bs.modal', function (e) {

            LoadCountries();
            $('#PhysicalAddress').val('');
            $('#PostalAddress').val('');
        });

        function LoadAddress() {

            $.ajax({
                url: '@(Url.Action("GetByClientId", "Addresses"))',
                traditional: true,
                dataType: "JSON",
                type: 'GET',
                data: { clientId: selectedClientId },
                error: function () {
                    alert("An error occurred.");
                },
                success: function (address) {
                    $('#sidePhysicalAddress').val(address.physicalAddress);
                    $('#sidePostalAddress').val(address.postalAddress);
                    $('#sideCity').val(address.cityName);
                }
            });
        }

        function LoadCountries() {

            $.ajax({
                url: '@(Url.Action("GetCountries", "Countries"))',
                traditional: true,
                dataType: "JSON",
                type: 'GET',
                error: function () {
                    alert("An error occurred.");
                },
                success: function (countries) {

                    $("#AddressCountryId").empty();   // clear before appending new list
                    $.each(countries, function (index, country) {
                        $('#AddressCountryId').append($('<option></option>').val(country.id).html(country.name));
                    });
                }
            });
        }

        function PostAddress() {
            var selectedCityId = $("#CityId option:selected").val();
            //  1. Build address object to match model class Address.cs
            var address = {
                PhysicalAddress: $('#PhysicalAddress').val(),
                PhysicalAddress: $('#PostalAddress').val(),
                CityId: selectedCityId,
                ClientId: '@Model.Id',
                CompanyId: null,
                LossAdjusterId: null,
                RepairerId: null,
                TracingAgentId: null,
                AttorneyId: null,
                ThirdPartyId: null,
                TowTruckId: null,
                RoadsideAssistId: null
            };

            //  2. Call POST
            $.ajax({
                url: '@(Url.Action("PostAddress", "Addresses"))',
                type: "POST",
                dataType: "JSON",
                traditional: true,
                data: address,
                success: function (address) {

                    LoadAddress();
                    // Unload modal
                    $('#addressModal').modal('hide');
                },
                error: function (message) {
                    console.log(message.statusText);
                }
            });
        };
    </script>

