@model UserPortfolioResource

@{
    ViewBag.Title = "Assign Portfolios";
}

<h2>User Portfolios</h2>

<div class="form-group">
    <label asp-for="UserId" class="col-md-2 control-label">Risk</label>
    <div class="col-md-10">
        <select asp-for="UserId" class="form-control" asp-items="@Model.Users"></select>
    </div>
</div>
<div class="row offset-md-0">
    <div class="col-md-5">
        <div class="form-group">
            <label asp-for="UnAssignedPortfolios" class="control-label"></label>
            <select asp-for="UnAssignedPortfolios" class="form-control"
                    asp-items="@Model.PortfolioList"></select>
        </div>
    </div>
    <div class="d-grid gap-2 col-1 mx-auto">
        <button class="btn  btn-danger" id="right" type="button"><i class="las la-angle-right"></i></button>
        <button class="btn btn-warning" id="left" type="button"><i class="las la-angle-left"></i></button>
        <button class="btn  btn-success" id="rightAll" type="button"><i class="las la-angle-double-right"></i></button>
        <button class="btn btn-primary" id="leftAll" type="button"><i class="las la-angle-double-left"></i></button>
    </div>
    <div class="col-md-5">
        <div class="form-group">
            <label asp-for="AssignedPortfolios" class="control-label"></label>
            <select asp-for="AssignedPortfolios" class="form-control"
                    asp-items="@Model.UserPortfolioList"></select>
        </div>
    </div>
</div>

<div>
    <a asp-action="Index" class="btn btn-info">Return</a>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

<script type="text/javascript">


    $(document).ready(function () {
        var selectedUserId = null;

        UserIdChanged();

        function LoadLists(aPortfolios, uPortfolios) {

            $('#AssignedPortfolios').empty();   // clear before appending new list
            $('#UnAssignedPortfolios').empty();   // clear before appending new list

            $.each(aPortfolios, function (index, value) {
                $('#AssignedPortfolios').append($('<option></option>').val(value.id).html(value.name));
            });

            $.each(uPortfolios, function (index, value) {
                $('#UnAssignedPortfolios').append($('<option></option>').val(value.id).html(value.name));
            });
        }

        function UserIdChanged() {
            selectedUserId = $("#UserId").val();

            $.ajax({
                url: '@(Url.Action("FillMultiSelectLists"))',
                type: 'GET',
                dataType: 'JSON',
                data: { userId: selectedUserId },
                success: function (data) {
                    LoadLists(data.assignedPortfolios, data.unAssignedPortfolios);
                }
            });
        }

        $('#UserId').on('change', function () {
            UserIdChanged();
        });

            $('#right').on('click', function () {
                var itemsSelected = [];
                selectedUserId = $('#UserId').val();

                $('#UnAssignedPortfolios option:selected').each(function () {
                    itemsSelected.push($(this).val());
                });

                if(itemsSelected) {
                    $.ajax({
                        url: '@(Url.Action("AddUserPortfolios"))',
                        type: 'POST',
                        dataType: 'JSON',
                        data: { userId: selectedUserId, portfolios: itemsSelected },
                        success: function (data) {
                            LoadLists(data.assignedPortfolios, data.unAssignedPortfolios);
                        }
                    });
                } else {
                    return false;
                }
            })

            $('#rightAll').on('click', function () {
                var itemsAll = [];
                selectedUserId = $('#UserId').val();

                $('#UnAssignedPortfolios option').each(function () {
                    itemsAll.push($(this).val());
                });

                if(itemsAll) {
                    $.ajax({
                        url: '@(Url.Action("AddUserPortfolios"))',
                        type: 'POST',
                        dataType: 'JSON',
                        data: { userId: selectedUserId, portfolios: itemsAll },
                        success: function (data) {
                            LoadLists(data.assignedPortfolios, data.unAssignedPortfolios);
                        }
                    });
                } else {
                    return false;
                }
            })

            $('#left').on('click', function () {
                var itemsSelected = [];
                selectedUserId = $('#UserId').val();

                $('#AssignedPortfolios option:selected').each(function () {
                    itemsSelected.push($(this).val());
                });

                if(itemsSelected) {
                    $.ajax({
                        url: '@(Url.Action("RemoveUserPortfolios"))',
                        type: 'POST',
                        dataType: 'JSON',
                        data: { userId: selectedUserId, portfolios: itemsSelected },
                        success: function (data) {
                            LoadLists(data.assignedPortfolios, data.unAssignedPortfolios);
                        }
                    });
                } else {
                    return false;
                }
            })

            $('#leftAll').on('click', function () {
                var itemsAll = [];
                selectedUserId = $('#UserId').val();

                $('#AssignedPortfolios option').each(function () {
                    itemsAll.push($(this).val());
                });
                
                if(itemsAll) {
                    $.ajax({
                        url: '@(Url.Action("RemoveUserPortfolios"))',
                        type: 'POST',
                        dataType: 'JSON',
                        data: { userId: selectedUserId, portfolios: itemsAll },
                        success: function (data) {
                            LoadLists(data.assignedPortfolios, data.unAssignedPortfolios);
                        }
                    });
                } else {
                    return false;
                }
            });
        });
</script>
}